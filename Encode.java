/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Coding;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author USER
 */
public class Encode extends javax.swing.JFrame {

    BufferedImage sourceImage = null, EmbeddedImage = null;
    private Object JLabelEmbedded;
    private Object JLabelSourceImage;
    public Encode() {
        initComponents();
    }
    Email email = new Email();
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextMessage = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabelSourceImage = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabelEmbedded = new javax.swing.JLabel();
        jButtonOpen = new javax.swing.JButton();
        jButtonEmbed = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonReset = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextChiper = new javax.swing.JTextArea();
        jButtonEncrypt = new javax.swing.JButton();
        jButtonEmail = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        keyTF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Message"));

        jTextMessage.setColumns(20);
        jTextMessage.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTextMessage.setRows(5);
        jScrollPane1.setViewportView(jTextMessage);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 803, -1));

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Source Image"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelSourceImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelSourceImage, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 380, 160));

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Embedded Image"));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelEmbedded, javax.swing.GroupLayout.DEFAULT_SIZE, 390, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabelEmbedded, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(395, 330, 400, 160));

        jButtonOpen.setText("Open");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonOpen, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, 70, -1));

        jButtonEmbed.setText("Embed");
        jButtonEmbed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmbedActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEmbed, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 300, -1, -1));

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 300, 70, -1));

        jButtonReset.setText("Clear");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonReset, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 300, -1, -1));

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Encrypted Message"));

        jTextChiper.setColumns(20);
        jTextChiper.setRows(5);
        jScrollPane2.setViewportView(jTextChiper);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 803, -1));

        jButtonEncrypt.setText("Encrypt");
        jButtonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEncrypt, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 170, -1, -1));

        jButtonEmail.setText("Send Email");
        jButtonEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEmailActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 300, -1, -1));

        jPanel5.setBackground(new java.awt.Color(153, 153, 153));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Key"));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(keyTF)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(keyTF, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 803, 70));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Coding/rB7oXR.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, -4, 810, 530));

        pack();
    }// </editor-fold>                        

    private File showFileDialog(final boolean open){
        JFileChooser fc = new JFileChooser("open an image");
        
        FileFilter filefilter = new FileFilter(){
            @Override
            public boolean accept(File file){
                String name = file.getName().toLowerCase();
                if(open)
                    return file.isDirectory()|| name.endsWith(".jpg") || name.endsWith(".jpeg")
                            || name.endsWith(".png")|| name.endsWith(".bmp");
                return file.isDirectory() || name.endsWith(".jpg") || name.endsWith(".jpeg")
                            || name.endsWith(".png")|| name.endsWith(".bmp");
            }
            @Override
            public String getDescription() {
                if(open)
                    return "Image (*.jpg, *.jpeg, *.png, *.bmp)";
                return "Image (*.jpg, *.jpeg, *.png, *.bmp)"; 
        }
    };
        fc.setAcceptAllFileFilterUsed(false);
        fc.addChoosableFileFilter(filefilter);
        
        File file = null;
        if(open && fc.showOpenDialog(this) == fc.APPROVE_OPTION)
            file = fc.getSelectedFile();
        else if(!open && fc.showSaveDialog(this) == fc.APPROVE_OPTION)
            file = fc.getSelectedFile();
        return file;
    }
    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {                                            
        File file = showFileDialog(true);
        
        if(file == null){
            return;
        }
        try {
            sourceImage = ImageIO.read(file);
            jLabelSourceImage.setIcon(new ImageIcon (sourceImage));
            this.validate();
        } catch (IOException ex) {
            
        }
    }                                           

    private void jButtonEmbedActionPerformed(java.awt.event.ActionEvent evt) {                                             
        if(jTextChiper.equals("")|| sourceImage == null){
            JOptionPane.showMessageDialog(this, "No message has been embedded",
                    "No picture or Message Found", JOptionPane.ERROR_MESSAGE);
            return;
        } 
        String Message = jTextChiper.getText();
        EmbeddedImage = sourceImage.getSubimage(0, 0,
                sourceImage.getWidth(), sourceImage.getHeight());
        embeddedMessage(EmbeddedImage, Message);
        
        jLabelEmbedded.setIcon(new ImageIcon(EmbeddedImage));
        this.validate();
    }                                            
    private void embeddedMessage(BufferedImage img, String mess){
        int messageLength = mess.length();
        int imageWidth = img.getWidth(), imageHeight = img.getHeight(),
                imageSize = imageWidth * imageHeight;
        
        if(messageLength * 8 + 32 > imageSize){
            JOptionPane.showMessageDialog(this,"Message too long for this image",
                    "Message Too Long!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else{
            embedInteger(img, messageLength, 0, 0);
            byte b[] = mess.getBytes();
            for(int i=0; i<b.length; i++)
                embedByte(img, b[i], i*8+32, 0);
        }
    }
    private void embedInteger(BufferedImage img, int n, int start, int storageBit){
        int maxX = img.getWidth(), maxY = img.getHeight(),
                startX = start/maxY, startY = start - startX*maxY, count=0;
        
        for(int i =startX; i<maxX && count <32; i++){
            for(int j=startY; j<maxY && count<32; j++){
                int rgb = img.getRGB(i, j), bit = getBitValue(n, count);
                rgb = setBitValue(rgb, storageBit, bit);
                img.setRGB(i, j, rgb);
                count++;
            }
        }
    }
    private void embedByte(BufferedImage img, byte b, int start, int storageBit){
        int maxX = img.getWidth(), maxY = img.getHeight(),
                startX = start/maxY, startY = start - startX*maxY, count=0;
        for(int i = startX; i<maxX && count <8 ; i++){
            for(int j = startY; j<maxY && count <8 ; j++){
                int rgb = img.getRGB(i, j), bit = getBitValue(b, count);
                rgb = setBitValue(rgb,storageBit, bit);
                img.setRGB(i, j, rgb);
                count++;
            }
        }
    }
    private int getBitValue(int n, int location){
      int v = (int) (n & Math.round(Math.pow(2, location)));
      return v == 0?0:1;
    }
    private int setBitValue(int n, int location, int bit){
        int toggle = (int) Math.pow(2, location), bv = getBitValue(n, location);
        if(bv == bit)
            return n;
        if(bv == 0 && bit ==1)
            n |= toggle;
        else if(bv == 1 && bit == 0)
            n ^= toggle;
        return n;
    }
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {                                            
        if(EmbeddedImage == null) 
        {
            JOptionPane.showMessageDialog(this, "No message has been embedded!", 
                    "Nothing to be save", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else{
            File file = showFileDialog(false);
            if(file == null)
                return;
            String name = file.getName();
            String Extention = name.substring(name.lastIndexOf(".")+1).toLowerCase();
            
            if(!Extention.equals("png")) {
            Extention = "png";
            file = new File(file.getAbsolutePath()+".png");
            }
            else if(!Extention.equals("bmp")) {
            Extention = "bmp";
            file = new File(file.getAbsolutePath()+".bmp");
            }
            else if(!Extention.equals("jpg")) {
            Extention = "jpg";
            file = new File(file.getAbsolutePath()+".jpg");
          }
        try {
            if(file.exists()) file.delete();
            ImageIO.write(EmbeddedImage, Extention.toUpperCase(), file);
        } catch(IOException ex) { 
            ex.printStackTrace(); }
        }
    }                                           

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {                                             
        jTextMessage.setText("");
        jTextChiper.setText("");
        keyTF.setText("");
        sourceImage = null;
        EmbeddedImage = null;
        jLabelSourceImage.setIcon(null);
        jLabelEmbedded.setIcon(null);
    }                                            

    private void jButtonEncryptActionPerformed(java.awt.event.ActionEvent evt) {                                               
        String originalString  = jTextMessage.getText();
        String secretKey  = keyTF.getText();
        String res =  AES.encrypt(originalString, secretKey);
        
        jTextChiper.setText(""+res);
        
    }                                              

    private void jButtonEmailActionPerformed(java.awt.event.ActionEvent evt) {                                             
        email.setVisible(true);
        email.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Encode().setVisible(true);
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButtonEmail;
    private javax.swing.JButton jButtonEmbed;
    private javax.swing.JButton jButtonEncrypt;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelEmbedded;
    private javax.swing.JLabel jLabelSourceImage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextChiper;
    private javax.swing.JTextArea jTextMessage;
    private javax.swing.JTextField keyTF;
    // End of variables declaration                   
}
